{
  "hash": "028973f88adf4992cf4ea162b1e404bd",
  "result": {
    "markdown": "---\ntitle: \"01: Introductions I\"\n---\n\n---\ntitle: \"Into the {tidyverse}\"\nformat: html\neditor: visual\nexecute:\n  error: true\n---\n\n\n## Logical Assertions\n\nBefore we jump headfirst data wrangling, we first need to practice a core idea that underlies how many of these functions work.\n\nMany of the functions and operations we will encounter in R rely on *logical assertions*. A logical assertion is a statement that can be either true or false (in R, of course, `TRUE` or `FALSE`). Let's look at an example first.\n\nTo begin, let's ask R whether 10 is greater than 5:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 > 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nR sensibly returns `TRUE`. Essentially, we are making a claim (10 is greater than 5) and R tells us whether that claim, or assertion, is true or not. Similarly, we can assert that 5 is greater than 10:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 > 10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nAnd R again, very sensibly, tells us that we're wrong (`FALSE`). So far so good!\n\n### Vectors\n\nIn the next step, we're going to meet a foundational piece of the way R works: the **vector**. Vectors are essentially one-dimensional lists of pieces of information. What this means is that instead of asking R about one number at a time, we could po\n\n## The Console\n\nThe Console is deceptively simple: just the `>` symbol with a flashing cursor after it, waiting for you to type something. However, the Console is the heart of R, where anything you want to do actually happens. Every command that you type, anything you want R to do, goes through here.\n\nThat sounds pretty intense, so let's get a couple of things straight right away. You will, inevitably, make typos and mistakes using R. You will write commands that make sense to you that R doesn't understand; you will write commands that **don't** make sense to you, that R **does** understand; and you will see all kinds of exciting errors, warning messages, and - once we get to the fun stuff - beautiful plots and results for our studies. So, right now, let's get over the fear of doing something \"wrong\" in R. You will do many, many things wrong, just like someone saying their first few words in a new language. Who cares? You're learning.\n\n### Task 1\n\nType literally any gibberish, words, keysmashes etc. into the Console and press Enter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Keysmash!\naslavb;lj aew aljvb\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: <text>:2:11: unexpected symbol\n1: ## Keysmash!\n2: aslavb;lj aew\n             ^\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Words!\nThis is fun! I'm having fun!\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: <text>:2:6: unexpected symbol\n1: ## Words!\n2: This is\n        ^\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Emojis! \n¯\\_(ツ)_/¯\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: <text>:2:1: unexpected input\n1: ## Emojis! \n2: ¯\n   ^\n```\n:::\n:::\n\n\nWell, that went about as expected!\n\nLuckily, R has a very short memory (that is to say, no memory to speak of) and is always ready to do the next thing I ask straightaway, even if it's nonsense - which is lucky for me, I can assure you.\n\nIf you haven't tried this yet, and the cursor in the Console is just blinking balefully at you, I'm serious - smash your head into the keyboard if you have to, or let your cat walk on it, or play it as if it were a piano, and press Enter. There are two important things that we are learning here:\n\n1.  To ask R to do something - that is, to \"run\" or \"execute\" the commands you write - you must write them out in the Console and press Enter.\n\n2.  Eventually, inevitably, something that you type WILL produce an error. This is no cause for panic, fear, or alarm, so get it out of the way now!\n\nFrom our gleeful keysmashing above, you will have seen that `aslavb;lj aew aljvb`, `This is fun! I'm having fun!`, and `¯\\_(ツ)_/¯` are not valid commands in R. In other words, although each of these has [a communicative function for humans](https://www.cjr.org/language_corner/keysmash-qwerty-asdf.php), R can't understand them. In order to get the answer that we want, we have to ask R to do something in a way it can understand, by writing commands it can parse (i.e. decipher) using the R language.\n\n### GlossoRlia\n\nJust like learning any other language, learning to communicate with R takes time and practice, and it can be very frustrating when you and R can't seem to understand each other. However, one advantage of learning to talk to R vs learning to speak a human language is that R always works the same way. It doesn't get angry or sullen or sarcastic; it won't ignore you or get impatient even if you ask it the same question a thousand times; and even if the response it gives doesn't make sense to you, there's always a logical reason for what it does.\n\nWhat I am trying to tackle right away is the idea that R is scary or incomprehensible. R is just a system for doing tasks that computers are great at - sifting through thousands of data points in a second, making systematic changes to huge datasets, creating complex mathematical models, drawing elaborate plots. It's powerful, and the very fact that you can do so much with it also means there's a lot to learn. But although R can do maths a lot quicker than a human, it can't design studies, or critically evaluate an argument, or appreciate a well-chosen emoji, or have sudden bursts of inspiration, or use the results it produces to improve society. Ultimately it's just a tool to help you achieve your goals.\n\nRight, enough philosophizing. Let's prove the point by jumping into R and learning about how it works!\n\n# Types of Data\n\nOne key concept for using R is the different ways it categorises data. By \"data\", I mean any piece of information you put into R - a word, a number, the result of a command or calculation, a dataset, etc. Depending on the type of data you have, R will treat it differently, and some operations only work on certain types of data. So, let's have a look at how R codes and deals with different types of data. There are lots of types of data in R, but we'll stick to three of the most common and important: numbers, characters, and logical.\n\n## Numbers\n\nThe first, and most obvious, type of data in R is numbers. Once again, let's create a new code chunk and see what happens.\n\n### Task 2\n\nType any single number in your new code chunk, then run the chunk.\n\n::: callout-tip\n#### Hint\n\nRemember that you can run all the code in a code chunk by pressing Ctrl/Cmd + Shift + Enter on your keyboard, or by clicking the green \"play\" arrow in the top right corner of the chunk.\n\nYou can also run only a particular line of code, or something that you've highlighted, by pressing Ctrl/Cmd + Enter.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pick any number at random - that's what I did!\n\n3958\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3958\n```\n:::\n:::\n\n:::\n\nThis might be what you'd expect. We've essentially asked R, \"Give me 3958\" (or whatever number you put in) and R obliges. The only thing that might be a surprise is the `[1]` marker, called an **index**. Basically, R has replied, \"The first thing (`[1]`) that you asked me for is 3958.\" We'll come back to this in a moment.\n\n#### Task 2.1\n\nTry putting in another number that's at least 4 digits long, including the commas to separate the thousands and hundreds places.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3,958\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: <text>:1:2: unexpected ','\n1: 3,\n     ^\n```\n:::\n:::\n\n:::\n\nNo good there. This is because commas have an important role to play in functions, as we will see later on. For now, we've seen that for long numbers, we need to give them to R without any commas. (Full stops to mark decimal places are just fine; try it if you like.)\n\n::: callout-note\nTry for a moment switching to Source mode by clicking the `Source` button in the upper left hand of your Quarto document. You can see that RStudio helpfully marks out the part of the code that isn't parsable (not in \"grammatical\" R) with a red ❌ next to the line number, and squiggly red underlining, likely familiar from word processing programmes, under the part of the code that's causing the issue. It won't do this for every error, but it's very helpful for finding \"grammatical\" errors like extra or missing brackets and commas.\n:::\n\nNext, let's try doing some basic maths.\n\n#### Task 2.2\n\nAdd together your shoe size and the number of windows in the room you're currently in.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n40 + 8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 48\n```\n:::\n:::\n\n\nImportant to note here is that we don't need to type an `=` to get the answer, just the equation we want to solve and press Enter. Again, we've asked R, \"Give me 40 + 8\" and R replies with the answer.\n\nYou will not be surprised to learn that you can use R as a calculator to subtract, divide, and multiply as well.\n\n#### Task 2.3\n\nTry doing each of these things with the same two numbers.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n40 - 8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 32\n```\n:::\n\n```{.r .cell-code}\n40 * 8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 320\n```\n:::\n\n```{.r .cell-code}\n40 / 8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n:::\n\nNow, let's say I wanted to have a bunch of different numbers to use for my analysis. In fact, I want every number between 1 and 50. I could do this by typing every number out one by one, but this is exactly the kind of tedious nonsense that computers are great at. Instead, we'll use the operator `:`, which means \"every whole number between\".\n\n#### Task 2.4\n\nPrint out every whole number between 1 and 50.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:50\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n```\n:::\n:::\n\n:::\n\nOne thing to notice here is that the indices I mentioned earlier have come up again. The first element after the \\[*n*\\] index is the *n*th element. Let's have a look at this some more.\n\n#### Task 2.5\n\nPrint out all the numbers 12 through 58; all of the numbers 23 through 106; and 36.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\nYou may have tried something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n12:58\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\n[26] 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58\n```\n:::\n\n```{.r .cell-code}\n23:106\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41\n[20]  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60\n[39]  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79\n[58]  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98\n[77]  99 100 101 102 103 104 105 106\n```\n:::\n\n```{.r .cell-code}\n36\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 36\n```\n:::\n:::\n\n\nAs you can see from the markers, this is three separate commands, because the numbered indices start over from `[1]` each time. I'd actually like to have all of those numbers together. To do this, I'm going to use a **function** called `c()`.\n\nTo use it, type the name of the function, which includes the brackets. Then, inside the brackets, put the numbers you want to put into a single vector, with different groups separated by commas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(12:58, 23:106, 36)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1]  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29\n [19]  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47\n [37]  48  49  50  51  52  53  54  55  56  57  58  23  24  25  26  27  28  29\n [55]  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47\n [73]  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65\n [91]  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83\n[109]  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101\n[127] 102 103 104 105 106  36\n```\n:::\n:::\n\n:::\n\nAs you can see from the numbered indices this time, when I put the numbers I want inside the function `c()`, separated by commas, R **c**ollects (or **c**oncatenates, or **c**ombines) all of the numbers into a single series of elements, called a **vector**.\n\nActually, this isn't a new thing; we've been looking at vectors this whole time. Any series of pieces of information in R is a vector (but see [the Vocab box on vectors and elements]{#vocab-vectors}. When we were looking at single numbers (like `3958` above), we were still getting a vector back from R, but it was a vector with only one element, and thus only `[1]`.\n\nIf I want the *n*th element in the vector we've just created, (say, the 88th), I can get it out using the numbered markers by **indexing**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(12:58, 23:106, 36)[88]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 63\n```\n:::\n:::\n\n\nWhat I've essentially asked is, \"Put all of these numbers into a single vector, and then give me the 88th element in that vector.\" As it turns out, the 88th element in that vector of numbers is 63.\n\n::: callout-warning\n### Vocab: Vectors and Lists\n\nA **vector** is essentially a series of pieces of data, or **elements**. When R returns a vector as the output from a command, each element is numbered in square brackets. These square brackets can also be used to **index** the vector to get the *n*th element.\n\nFor **atomic vectors** created with `c()` or similar operations, there are some important rules:\n\n1.  Each element must be scalar (i.e. of length 1)\n2.  All of the elements must have the same data type (or will be coerced)\n\nFor a complete explanation of vectors (and their more versatile siblings, lists) that's beyond the scope of this tutorial, see:\n\n1.  [This excellent explainer on vectors and lists](https://jennybc.github.io/purrr-tutorial/bk00_vectors-and-lists.html)\n2.  [R for Data Science chapter 20](https://r4ds.had.co.nz/vectors.html)\n:::\n\n#### Task 2.6\n\nTo finish up, create a vector of every whole number between 37 and 86, and subtract 7 from each one.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(37-86) - 7\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -56\n```\n:::\n:::\n\n:::\n\nThis could be a *very* tedious process, but here we have an example of a **vectorised operation**. By default, the operation \"subtract 7\" is automatically applied to each individual element of the vector.\n\nWe can do a lot more than this with numbers and data in R, but this is an excellent start. Just one note before we move on about the order in which R performs its calculations.\n\n::: callout-hint\n### Order of Operations\n\nAs you may remember from school, mathematical expressions are evaluated in a certain order. You can use brackets to tell R which part of a longer calculation to do first, e.g.:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n59 * (401 + 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23954\n```\n:::\n:::\n\n\nWithout the brackets, the expression is evaluated from left to right, which in this case would give a different answer:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n59 * 401 + 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23664\n```\n:::\n:::\n\n\nWhenever there's any chance for ambiguity, always use brackets to make sure the calculation is performed correctly.\n:::\n\n## Characters\n\nCharacters are a more general data category that also includes letters and words. In R, strings of letters or words must be enclosed in either 'single' or \"double\" quotes, otherwise R will try to read them as code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHello world!\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: <text>:1:7: unexpected symbol\n1: Hello world\n          ^\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n\"Hello world!\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello world!\"\n```\n:::\n:::\n\n\nAs you can see here, the first command without quotes throws an error, whereas the second prints out our command just like it did with the single numbers before.\n\nAn important thing to note is that R sees everything inside a pair of quotes as a single element, regardless of how long it is. You can see this in the indices we saw before:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"Hi!\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hi!\"\n```\n:::\n\n```{.r .cell-code}\n\"It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness...\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness...\"\n```\n:::\n:::\n\n\nThe `[1]` markers also tell us that each of the two strings above already constitute vectors, each of length 1. Just like we saw with numbers, above, any number of character strings can be combined into a vector. You can also use the numbered markers to extract the *n*th element in that vector.\n\n### Task 3\n\nCreate a vector containing the first five animals you think of, then print the 3rd one.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"bumblebee\", \"squid\", \"falcon\", \"flea\", \"seagull\")[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"falcon\"\n```\n:::\n:::\n\n:::\n\nThe placement of the quotes is very important here - they can't include the commas. As we said before, R uses commas to separate different elements. So, if you didn't enclose each word in quotes separately with commas in between, you would have had this odd message:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"bumblebee, squid, falcon, flea, seagull\")[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\n`NA` is a very special sequence of letters in R. It indicates that something is **n**ot **a**vailable, and it usually represents missing data, or that a calculation has gone wrong or can't be performed properly.\n\nWhy have we got it here? Essentially, we asked R for the eighth element in a vector that, as far as R can tell, only contained one. This is because there's only one pair of quotes, so all five animals and the commas between them are considered to be one element. Since there isn't a fifth element, R has informed us so accordingly - the answer to our query is `NA`, doesn't exist. This isn't what we wanted, but R is not in the wrong here, because it's done precisely what we told it to do.\n\n## Logical\n\nThe final type of data that we'll look at for now is logical data. In addition to performing calculations and printing out words, R can also tell you whether a particular statement is `TRUE` or `FALSE.` To do this, we can use logical operators to form an assertion, and then R will tell us the result.\n\n### Task 4\n\nAsk R whether:\n\n-   5 is greater than 10\n-   6 is less than 12\n-   27 is less than or equal to 27\n-   420 equals 42\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 > 10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n6 < 12\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n27 <= 27\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n420 == 42\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n:::\n\n::: callout-note\n#### Asserting Equivalence\n\nThe last statement above may have caused you some trouble. If you tried this with a single equals sign, you would have had a strange error:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n420 = 42\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in 420 = 42: invalid (do_set) left-hand side to assignment\n```\n:::\n:::\n\n\nThe problem is that in R, the single equals sign `=` is equivalent to the assignment operator `<-`, which we'll learn how to use in just a moment. Single `=` also has an important and specific role to play in function arguments. For now, you just need to know that `=` is a special operator that doesn't do what we wanted it to do here, and that \"exactly equals\" in R is `==`.\n:::\n\n#### Task 4.1\n\nUse a single command to ask R whether the numbers 2 through 10 are less than or equal to 6.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2:10 <= 6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE\n```\n:::\n:::\n\n:::\n\nHere R prints out a value of `TRUE` or `FALSE` for each comparison it's asked to make. So, the first element in the output (`TRUE`) corresponds to the statement `2 <= 6`, the second to `3 <= 6`, and so on. It might not seem like it at the moment, but this can be staggeringly useful for selecting and filtering data that meet particular requirements, or checking our data to find problems - we'll see how later on!\n\n## Class and Coercion\n\nWith these simple examples, it may be obvious just by looking that `25` is a number and `porcupine` is a word. However, this isn't always so straightforward, and there are some situations - such as data checking/cleaning, or debugging - where I might want to ask R to tell me what type of data a certain thing is. To do this, I can use another function, `class()`. R will simply print out, as a character, the name of the data type of whatever I put into the brackets.\n\n### Task 5\n\nUse the `class()` function to get R to print the value `\"numeric\"`.\n\n::: {.callout-tip collapse=\"true\"} \\#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Any numeric vector will do\nclass(216907)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\n## You can also use a longer vector of numbers\n## as long as they are all numbers!\nclass(c(4:291, -1, 38.7, 100000000))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n:::\n\nYou can try the same with vectors containing logical or character data - give it a try!\n\n### Task 6\n\nWhat data type does R give you if you combine numbers and characters in `c()`?\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Again, anything will do\n\nclass(c(93, -1905, \"avocado\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n:::\n\nSomething interesting has happened here. Recall that atomic vectors created with `c()` must all have the same data type. Here, we combined two types of data: numeric and character. We didn't get an error - instead, without warning or telling us, R quietly converted the entire vector to `character` type. This forcible conversion is called **coersion**.\n\n::: callout-note\n### Vocab: Coersion\n\nCoersion is when a piece of data is forcibly changed from one data type to another. This is sometimes intentional, but it can happen unintentionally (and without any warning or fanfare!), so is a common source of errors.\n\nCoersion follows a hierarchy; data types on the left can be coerced into the types further along to the right.\n\nlogical ==\\> integer ==\\> double (numeric) ==\\> character\n\nAs we saw previously, you can check the data type of a vector with `class()`, or check if it is a particular type (and so receive a logical vector in response) with the `is.*()` family of functions. (The `*` notation refers to a placeholder for many different options, such as `is.numeric`, `is.character`, etc.)\n\nYou can similarly (try to) coerce a vector into a particular data type with the `as.*()` family of functions.\n:::\n\nThis explains why our vector from Task 6 was a `character` vector - since the vector contained at least one character element, everything else in the vector was coerced to the same type. This can cause problems because R can sometimes convert numerial data into characters, even though they still *look like* numbers.\n\nEven though we can do mathematical operations on numbers, we can't do them on characters; it should be clear that asking e.g. what is `\"tomato\" - 7` is nonsense. However, this is the case even if all of the data are numerals! For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## No problem here; all numbers\nc(2:20, 45) - 7\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] -5 -4 -3 -2 -1  0  1  2  3  4  5  6  7  8  9 10 11 12 13 38\n```\n:::\n\n```{.r .cell-code}\n## Doesn't work\nc(2:20, \"45\") - 7\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in c(2:20, \"45\") - 7: non-numeric argument to binary operator\n```\n:::\n:::\n\n\nEven though \"45\" looks like a number, because it's in quotes, R thinks that it's a character, and will refuse to do the calculation, in the same way that it would refuse to do it with \"tomato\".\n\n## Objects\n\nR is called a \"language\" for a reason - it is actually a language, or a way of talking to computers to ask it to do things for you. Like any language, learning to \"speak\" R takes practice and repetition. In this section, we'll cover the basic \"grammar\" of R, including some important ideas about how R understands what you ask it to do. However, just like any language you learn, the best way to really understand what each of these things do is to try them out for yourself, make mistakes, and keep using them until they're familiar.\n\nIn a similar way that the basic unit of English is the word[^1], the basic unit of the R programming language is the **object**. This section will explore the basics of what an object is and some of their key features in R.\n\n[^1]: As a linguist I have to note, one, [words don't exist](https://amazingakita.tumblr.com/post/181685581034/people-who-dont-even-care-about-language-how-can), and two, the closest linguistic term for what an object is is probably \"lexeme\". \"Word\" will get you in the right vicinity, though, conceptually. If you'd like to dive down this rabbit hole (rabbit-hole?) [this Crash Course video on morphology](https://www.youtube.com/watch?v=93sK4jTGrss) is a good place to start, but don't forget to come back and keep working on R!\n\n::: callout-note\n### Vocab: Objects\n\nObjects are the basic elements that R is built around - the equivalent of words. An \"object\" in R is any bit of information that is stored with a particular name. Objects can hold anything, from a single number or word to huge datasets with thousands of data points or complex graphs.\n:::\n\n### Creating an Object\n\nLet's start by creating a new object. Here we'll also formally meet a very important piece of R code: the assignment operator `<-`.\n\n**Note:** At the moment your Environment should be empty. As a reminder, Environment is by default the first (leftmost) tab in one of your four main windows in RStudio. If you have a look at it just says, \"Environment is empty\", we're all good! If for some reason it isn't, click the broom icon to clear everything from your environment before you get started. Managing your Environment is an important skill that we'll come back to once we've got comfortable working with objects.\n\nFirst, let's look at the foundational structure of almost everything you will do in R:\n\n```         \nobject <- instructions\n```\n\nYou can read this code as something like, \"The object `object` is created from (`<-`) some instructions.\" Objects can be named almost anything (although see Naming, below); the object name is just a label so you, the person using R, can find, refer to, and use the information you need. The special operator `<-`, often called the \"assignment operator\", has single job: to assign output to names, or in other words, to create objects. You should **always and only** use `<-` to create objects; it's possible, to also use single equals `=`, but I *strongly* advise you not to!\n\nSo, what about the `instructions` in this pseudo-code above? These instructions can be very simple: a single number or word, or hundreds of lines of code, or anything in between. They're simply any value command that produces some output. Whatever output the instructions produce will be \"saved\", or assigned, to the name in `object`.\n\n::: callout-note\n### Naming in R\n\nCOMING SOON\n\n:::\n\n### Task 7\n\nUsing the `object <- instructions` structure, create a new object called `current_year` that contains (as you might expect) the current year.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurrent_year <- 2023\n```\n:::\n\n:::\n\nLet's have a look at that command. On the left side I've written the name I want my new object to have, which I've called `current_year`. (I could have called it anything, like `the_first_example_of_an_object_InThisSection.so.far` or `exobjt7sol1` or anything else that follows R's naming conventions; but it's a good idea to name your objects something useful, brief, and obvious, so you can remember what they contain.) Then, I've written the assignment operator `<-` to assign whatever comes after it to the object label `current_year`. Finally, I've written instructions for what I want this object to contain: in this case, just the number `2023`.\n\nMake sure you do this yourself in your own document, even if you've looked at the solution rather than trying it for yourself first. Once you've typed the command, there's a final, critical step to actually create the object: you have to **run** the command in order for it to take effect. As a reminder, you can do this by clicking the green ▶️ button in the upper right corner of the code chunk, or by pressing Ctrl/Cmd + Enter when your cursor is blinking on the same line as the code you want to run.\n\nAssuming your code is valid, you should see the green bar appear along the left-hand side of the code chunk, but you might notice that there's no printout that appears under the code chunk, as there was previously. In fact, if the code ran successfully, it might look like nothing happened at all! To find out what did happen, have a look again in your Environment pane. You should now see a new section, \"Values\", and underneath the name of your new object and what it contains. Success!\n\n### Calling an Object\n\nFor any object, from the most simple to the most complex, you can always see what’s in it by **calling** the object. This simply means that you type the name of the object and run it. R will print out whatever is stored in the object.\n\n#### Task 8\n\nCall the `current_year` object.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurrent_year\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2023\n```\n:::\n:::\n\n:::\n\nThis output looks just like what we saw earlier in Task 1, when we just asked R to print out a number for us. R tells you that there is one value in the `current_year` object, which is the number 2023. In essence, the object name `current_year` is just a label for the number it contains.\n\n::: callout-warning\n### Important: Creating vs Calling\n\nThese two actions are the essential basis of everything you will do in R. All of your code will, at base, either create an object, or call an object. (Changing an existing object, as we'll see shortly, is the exact same procedure as creating one from scratch.)\n\nWhen you successfully **create** an object using the assignment operator (`<-`), the object is created but is **not** printed out. This is because R always does only and exactly what you ask it to do, and using the assignment operator only tells R to assign something to an object, not to print it out.\n\nWhen you **call** an object, the current contents of that object are printed out, but that object is **not** changed - you only reproduce a copy of its contents for review. To create or change an object, you must use the assignment operator to assign the output to a new (or existing) object name.\n:::\n\nLet's make all of this a bit more concrete by seeing how we can use objects effectively.\n\n### Using Objects\n\n#### Task 9\n\nCreate an object called `birth_year` that contains the year you were born.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbirth_year <- 1988\n```\n:::\n\n:::\n\nI have used my own birth year here, but you should replace the number with your own birth year. Again, when you type this command and run the command, it will seem like nothing happens. However, you will be able to see the new object in your Environment.\n\nNow we have two objects, `current_year` and `birth_year.` Since both of these objects contain a number, we can use them as if they were numbers.\n\n#### Task 10\n\nUsing these two objects, get R to print out your own age in years.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurrent_year - birth_year\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 35\n```\n:::\n:::\n\n\nThis line of code subtracts `birth_year` from `current_year.` Because these objects contain numbers, R treats them as if they were numbers, and outputs the difference between them.\n:::\n\nWe can also do any other mathematical operations on objects that contain numbers.\n\n#### Task 11\n\nWrite some mathematical equations using the `current_year` object.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurrent_year*5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10115\n```\n:::\n\n```{.r .cell-code}\ncurrent_year+5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2028\n```\n:::\n\n```{.r .cell-code}\ncurrent_year^2 # to the power of 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4092529\n```\n:::\n:::\n\n:::\n\nThis is all well and good, but there’s no real benefit to doing this with an object called `current_year`, rather than just using the number `2023`. Instead, we can take advantage of objects by storing *multiple pieces of information* in a single object.\n\n#### Task 12\n\nUse the code below as a template to create an `ages` object, replacing the numbers with the ages of yourself and all your family members, in whatever order you like.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nages <- c(35, 29, 64, 89, 2)\n```\n:::\n\n\nAgain, when I run this command, a new object appears in my Environment, called `ages.` This one looks a bit different than the other two, though. In Environment, I can see that this object contains numbers (\"num\"); that there are four of them ([1:5]); and that those numbers are 35, 29, 64, 89, and 2. This new object is another vector, as we saw earlier. This particular object is a vector of length 5 - that is, it has five elements in it.\n\n#### Task 13\n\nAsk R for the class of the `ages` object.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(ages)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n:::\n\nThis might not have been what you expected, but remember, `ages` (importantly, *without* quote marks!) is the name of an object. To find out what kind of data it is, R looks at what that object contains, not at the name of the object itself. We already saw that `ages` contains only numbers; so, R tells us that it’s a numeric vector.\n\nOne more example to emphasize this point, because it’s often a source of confusion when starting out with R. If we want to ask R the class of the word \"ages\", we would need to put it in quotes, and we’d get a different answer:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(\"ages\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\nThe key thing here is that objects have the class of the data they contain, and are not character data; and whenever you want to use an object, you **must not** use quotation marks. On the other hand, if you want to input character data into R, you **must** use quotation marks. Otherwise, R will look for an object or function with that name, which will likely produce a \"cannot find object\" error.\n\nSo, if the object `ages` is just a convenient name for a vector of numbers, what happens if we try to do the same maths we did before? For instance, I might want to calculate the birth year of each of my family members, using their ages. To do this, I have to subtract each of their ages from the current year. I could do this one at a time - or all at once using my `ages` object.\n\n#### Task 14\n\nCalculate each of your family members’ birth years using your `ages` object, and save the birth years you've just calculated in an object called `birth_year`.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbirth_year <- current_year - ages\n```\n:::\n\n:::\n\nBecause we’ve used the assignment operator, R doesn’t print out the years. Instead, the output of our calculation is saved as the object `birth_year.` Hmm - didn't we already have an object called `birth_year`, though? What happened to it?\n\n::: callout-important\n### Important: Overwriting Objects\n\nYou might notice that we already had an object called `birth_year` that we created above. R, again, does only and exactly what you ask it to do. Unlike, say, a word processer, that will give you a warning if you try to save two documents in the same folder with the same name, R won’t ask you if you’re sure you want to overwrite an existing object with new information - it will just **do it**. If you have a look in your Environment, you will see that the previous version of `birth_year`, containing only your birth year, has been quietly replaced with the new one containing the vector of birth years you just created.\n\nThis can be a good thing, because you can easily update the information stored in an object with changes, edits, or new information. However, it also means that you can overwrite or replace data when you don’t want to, if you use the same object name.\n\nThis is why it is so important to keep track of all of the commands and changes you make to your data. If you accidentally replace your dataset with, say, a single word or number with an error in your code, you can easily retrace your steps and avoid redoing work.\n\nIf you are interested in understanding this process of assigning and replacing the contents of objects better, the aside below explains it in more depth.\n\n::: {.callout-note collapse=\"true\"}\n#### Can you actually change an object?\n\nThink of objects as boxes. The names of the objects are only *labels*, and you can store anything you like inside them. However, unlike in the physical world, objects in R cannot truly change. You can put stuff in and take stuff out, and that’s pretty much it. Unlike boxes, though, when you take stuff out of objects, you only take out a **copy** of its contents. The original contents of the box remain intact. Of course, you can do whatever you want (within limits) to the stuff once you’ve taken it out of the box, but you are only modifying the copy. The key thing to remember is that unless you put that modified stuff into a box, R will forget about it as soon as it’s done with it. In other words, if you want to \"save\" any changes you make, you must assign them to an object in order to keep them.\n\nNow, as you probably know, you can call your boxes (objects) whatever you want (again, within certain limits). This means that that you can call the new box the same as the old one, as we saw with `birth_year` above. When that happens, R basically takes the label off the old box, pastes it on the new one, and burns the old box. So even though some operations in R may look like they change objects, what’s actually happening is that R copies their content, modifies it, stores the result in a different object, puts the same label on it, and discards the original object. Understanding this mechanism will make things much easier!\n\nPutting the above into practice, this is how you \"change\" an R object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# put 1 into an object (box) called a\na <- 1\n\n# copy the content of a, add 1 to it and store it in an object b\nb <- a + 1\n\n# copy what's inside b and put it in a new object called a\n# discarding (\"overwriting\") the old object a\na <- b\n\n# now see what's inside of a\n# (by copying its content and pasting it in the console)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nOf course, you can just cut out the middleman (creating an object b). So to increment `a` by another 1, we can do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- a + 1\n\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n:::\n:::\n\nWe will talk further about using scripts and writing multiple commands below; but first, we’ll need to have a look at a very important type of object in R: the function.\n\n## Functions\n\nFunctions are like verbs in the R language - they’re how R *does* anything. Functions may not look exactly like verbs in the language you speak because they have a different syntax (i.e., a different order and grammar), but they work in a very similar way. In order to use them, you need to learn how to \"translate\" the command you want to give R into a verb (function) it can understand.\n\n### Fun with Functions\n\nIn this section, we'll go through a step-by-step worked example of puzzling out how to use a function.\n\nLet’s look at an example of how functions are like verbs, drawing on some basic linguistics. We’ll start with the English command, \"Round the number 7.3928 to two decimal places.\" If we want R to do this for us, we have to write this command in a way that R can understand. First, we need to know what function corresponds to the English verb \"round\" - that is, what function will do the same action that we want R to perform. We’re lucky in this case: the function in R is also called `round()`. (See the box below for more on how to find the function you want.)\n\nWe know that we’re looking at a function in R because functions always have a name followed by brackets. That is, they always have the general form `function_name()`. Inside the brackets, we can add more information to the function to complete our command, although not all functions require any more information.\n\n### Task 15\n\nTry running the `round()` function.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): 0 arguments passed to 'round' which requires 1 or 2 arguments\n```\n:::\n:::\n\n:::\n\nUnsurprisingly, R has given us an error. This is an **informative** error, though - that is, the error gives of some sort of intelligible clue about what's gone wrong. Namely, it tells us that `round()` can’t just work without additional information (i.e. \"required arguments\"). Imagine, for instance, if you wanted a friend or colleague to round 7.3928 to two decimal places, and in order to ask them to do that, you just shouted \"ROUND!\" at them. Just like that person would would, R has objected to this, telling you that it needs more information in order to do what you’ve asked it to.\n\nOur original command, \"Round the number 7.3928 to two decimal places\", has two more important pieces of information that we need to tell R: what number we want to round (7.3928) and how many decimal places we want to round it to (2). So, how do we say this in R? To find out, let’s look at the help documentation.\n\n::: callout-tip\n#### Help Documentation\n\nHelp documentation is information, like instruction manuals, built into R about how individual functions work. Function documentation varies wildly in helpfulness and completeness, but it's a useful place to check first if you want to find out what a function does. You can access the help documentation in a few different ways: by running `?function_name` or `help(function_name)` in the console, or by clicking on the \"Help\" tab in the Files section of RStudio and using the Find box to search for the function.\n:::\n\n#### Task 16\n\nPull up the help documentation for `round()` in RStudio.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?round\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nstarting httpd help server ... done\n```\n:::\n:::\n\n:::\n\nThe first section, \"Description\", varies quite a bit in intelligibility, depending on how complex the function is. Here, if we ignore the information about the other function including in this document, we can see that we have a useful description of `round()` that tells us that it rounds numbers (yay!) to a certain number of decimal places. That’s exactly what we want, so how do we use it?\n\nLet’s scroll down to \"Usage\", which gives examples of what the function looks like. You can see that the basic structure of this function is `round(x, digits = 0)`. It seems like we need to add some more information in the brackets of our function - but how do we interpret `x` and `digits = 0`?\n\n### Arguments\n\nThe information inside a function’s brackets to give it the information it needs to work are called **arguments**. Each argument in a function is separated by a comma, so we can see from `round(x, digits = 0)` that the `round()` function can take two arguments. How many arguments a function has depends on the function; some (like `Sys.Date()`) don’t need any arguments to run. One of the most useful parts of a function’s help documentation is the \"Arguments\" section, which tells you what each of the function's arguments are and how to use them.\n\nThere are two main types of arguments: named and unnamed arguments. Conveniently, the arguments of `round()` give us one example of each.\n\n#### Unnamed Arguments\n\nThe first argument to `round()` is simply `x`. Just like in maths, `x` is a placeholder for some number or numbers (a \"numeric vector\", which should sound familiar now) that you want to pass to the function. This is common notation in many functions: `x`, often the first argument in a function, is often the placeholder for the information you want to use the function on. In our case, we just have one number we want to round, so that’s what we should replace with `x`.\n\n#### Named Arguments\n\nThe second argument of round() is a named argument, `digits = 0`. You can think of named arguments like settings that change the way a function works, often with only certain allowable values. Here we can see that the name of the argument is `digits`; the name before the `=` sign tells R which setting we want to change.\n\nThe help documentation tells us that `digits` should be an \"integer indicating the number of decimal places...to be used.\" We can also see in \"Usage\" that this argument has a default value, `digits = 0`. That means that if we don’t explicitly include the argument `digits` when we use the function, by default the `round()` function will round the number you give it to 0 decimal places. Named arguments frequently, but not always, have a default, and it's important to check so the function doesn't quietly do something unexpected.\n\nDefault values of arguments are really useful, because the default is usually the most frequently used setting. It means you don’t have to specify every single aspect of a function every time you use it, as long as you want the function to work that way! In our case, we actually wanted `round()` to round to two decimal places, not 0. So, in our command, we should change the setting from the default, 0, to 2.\n\n### Using Functions\n\nNow that we know what both of these arguments mean, we can change them to actually translate the English sentence \"Round the number 7.3928 to two decimal places\" into a command that R can work with. We’ll explicitly write out each argument so we know what they are doing.\n\n#### Task 17\n\nUse the `round()` function to round 7.3928 to two decimal places.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(7.3928, digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.39\n```\n:::\n:::\n\n:::\n\n::: callout-note\n#### Order of Arguments\n\nIf you want to, you can achieve the same result by changing the order of the arguments. Because we have written the names of both arguments, R can still do what we want it to do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(digits = 2, x = 7.3928)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.39\n```\n:::\n:::\n\n\nWe can also, to some degree, drop the names of the arguments, as long as R can still understand what we’re trying to do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(digits = 2, 7.3928)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.39\n```\n:::\n:::\n\n\nHere I left out the `x =`. R can still understand this because `round()` only takes two arguments, and we explicitly told it what value belongs to `digits`, so it assumes the second number must be `x`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(7.3928, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.39\n```\n:::\n:::\n\n\nThis time I dropped both argument names. R can still understand this because when you don’t specify which input goes with which argument, R will assume they should go in the default order given in the help documentation. So, R has automatically assigned 7.3928 to `x` and 2 to `digits`, which is what we wanted.\n\nAs I've become more proficient at writing code, I find that I'm *more* insistent on naming arguments, even though I know how the function works and dropping them is more efficient (at least in terms of typing). That's because Future Me hasn't been staring at this code for the last five hours, and verbose code is much, much easier to read! So, I strongly recommend getting in the habit of including argument names in your code as a favour to your future self, and to avoid situations like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(2, 7.3928)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nHere, since we didn’t specify, R assumed that 2 was the number we wanted to round. This isn’t what we wanted - but R has no way of knowing this. It always assumes that what we typed was precisely what we intended to ask R to do.\n:::\n\n#### Passing Multiple Values to Arguments\n\nA last important aspect of using functions is to remember that each argument in a function can only take a single object as input. For example, we saw above that we put the single value 7.3928 into the `x` argument of `round()`. But what if we wanted to round more than one number? We don’t want to have to write a new `round()` command for every number, even though we could do this if we particularly enjoyed doing a lot of tedious and repetitive typing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(7.3928, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.39\n```\n:::\n\n```{.r .cell-code}\n## ughhhh\nround(59.54, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 59.54\n```\n:::\n\n```{.r .cell-code}\n## noooooo :(\nround(0.198, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2\n```\n:::\n\n```{.r .cell-code}\n## thanks I hate it\n```\n:::\n\n\nSo what happens if we try to put all of those numbers into `round()`? We might first try this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(7.3928, 59.54, 0.198, 2)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): 4 arguments passed to 'round' which requires 1 or 2 arguments\n```\n:::\n:::\n\n\nOnce again, R tells us that this doesn’t work by throwing an error. R has tried to do what we wanted, but the `round()` function only allows a max of two arguments, and we’ve given it four. Behind the scenes, R has tried to run `round(x = 7.3928, digits = 59.54...` and can’t proceed from there because it doesn’t know what to do with the last two numbers. So, what we need to do is find a way to put all three numbers that we want to round into the first `x` argument together. If only there was a way to **c**oncatenate them together...\n\nYou may have guessed where this is going: one method we could use would be to put the three numbers we want to round into a single object, and then pass that object to `round()` as the `x` argument. We already saw that we can combine any number of things together into a single vector using the `c()` function.\n\n#### Task 18\n\nUse `c()` to create a new object containing the three numbers 7.3928, 59.54, and 0.198, then use `round()` to round them to two decimal places.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers <- c(7.3928, 59.54, 0.198)\n\nround(numbers, digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  7.39 59.54  0.20\n```\n:::\n:::\n\n:::\n\nPerfect! This time, all three numbers together went into the `x` argument.\n\nWe could also simplify this even further by removing the intermediate step of creating the `numbers` object.\n\n#### Task 19\n\nUse `c()` and `round()` together in a single command to get the same output as above.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(c(7.3928, 59.54, 0.198), digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  7.39 59.54  0.20\n```\n:::\n:::\n\n:::\n\nHere we can see a good example of a function inside another function. You can stack, or \"nest\", functions inside each other like this as much as you like, although it can become difficult to read the code or keep track of what it’s doing. (In the next tutorial, we'll introduce a popular alternative to writing nested code: the pipe operator.)\n\nThat's looking like some proper R code! Very nicely done.\n\n::: callout-note\n#### Help Documentation, Revisited\n\nBefore we leave the `round()` function altogether, let’s take a look at two more useful sections of the help documentation. Depending on what you are trying to do, the \"Details\" section can tell you more about how exactly the function works - how it behaves in certain situations, or how it handles unusual or difficult cases. If a function isn’t doing what you expect it to, this is a good place to look for an explanation.\n\nFinally, at the end of the documentation you can find the \"Examples\" section. If you are learning to use a new function, this section can give you a template for writing your own commands. You can also click the \"Run examples\" link, which will run the code in the Examples section for you so you can see what the function will do.\n:::\n\n### Choosing Functions\n\nJust like learning a new language, when you start out in R your \"vocabulary\" of functions will be small, and you’ll only be able to \"speak\" a small number of commands from memory. As you work more in R and practice using more functions, your vocabulary will grow. However, if you are trying to do something new or unusual in R, finding the right function that does what you want it to do often takes some work and research. This is just like having to look up a new word or phrase in the dictionary if you don’t know how to say something in the language you’re learning.\n\nIf you don’t know what function to use, your first step can be to Google it with a search like \"function to [whatever you want to do] in R\", which will often put you on the right track! (R's internal help search is often most useful when you already know the name of the function you want to use.)\n\n## Packages\n\nIn this final section for this tutorial, we'll introduce one of the main strengths of R: its many, many user-written open-source packages.\n\n::: callout-note\n### Vocabulary: Package\n\nA package is a bundle of (usually, but not necessarily!) multiple functions. Some packages, like {base} and {stats} (that contain the `c()` and `round()` functions we have used respectively) come automatically installed and loaded with R, and you can use them right off the bat without having to do anything special. For the others, you must install and load them before you can use them.\n:::\n\n### Rounding, Revisited\n\nLet’s say at this point that we’re not entirely happy with the way `round()` did the rounding on our four numbers. We actually wanted the output to drop the leading 0 and keep the trailing 0, so instead of rounding 0.198 to 0.2, we wanted .20. Looking at the documentation for `round()`, there doesn’t seem to be a way to change this in the `round()` function itself. So, we’ll need to find another function that does what we want it to do[^2].\n\n[^2]: You may not find any that you'd quite like to use - in that case, of course, you can code something new! Oh, the functions you'll write...\n\nWith a bit of industrious Googling, we can find that there’s a different function, `rd()`, that does drop the leading 0. Fantastic! Let’s do it.\n\n#### Task 20\n\nUse [the help documentation for `rd()`](https://www.rdocumentation.org/packages/weights/versions/1.0.1/topics/rd) to round the same three numbers as above.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrd(c(7.3928, 59.54, 0.198), digits = 2)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in rd(c(7.3928, 59.54, 0.198), digits = 2): could not find function \"rd\"\n```\n:::\n:::\n\n:::\n\nWhat happened? We know we spelled the function correctly (it’s only two letters!) and we can see from the help documentation that the arguments are the same as for `round()`. Why doesn’t this work?\n\nThere’s a hint in the upper right corner of the help documentation that says: \"From weights v1.0.1\". This is the name of the **package** that contains the function `rd()`. From the error message that R gave us above, we can tell that R doesn’t come with this package pre-loaded. So, even though the function does exist, we don’t currently have access to it.\n\n### Installing Packages\n\nOnce you know the name of the package you want to install (as we found out above), you can then ask R to go on the Internet, find the package, and install it. Luckily, the function that does this is very easy to remember!\n\n#### Task 21\n\nRun the code below to install the {weights} package **in the Console** (and NOT in a code chunk!)\n\n**Hint**: Notice the quote marks. This function won’t work properly if you don’t put in the quotes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"weights\")\n```\n:::\n\n\nYou should see a lot of code come up very quickly - the default colour scheme in RStudio has this text in red, which looks alarming, but unless you see the word \"ERROR\", everything's fine. There will be lots of `trying URL` and then` installing *binary* package` and finally `The downloaded source packages are in` followed by a file name. If this is what happened when you ran this function, congratulations! You are now the proud owner of a copy of the {weights} package, successfully installed on your computer.\n\n(Note: If R throws an error and tells you that the package failed to install, see [this troubleshooter for solving package installation errors](https://support.posit.co/hc/en-us/articles/200554786-Problem-Installing-Packages).)\n\nNow that we have the package that contains the `rd()` function, let’s try using it again.\n\n#### Task 22\n\nRun the same `rd()` command as above.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrd(c(7.3928, 59.54, 0.198), digits = 2)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in rd(c(7.3928, 59.54, 0.198), digits = 2): could not find function \"rd\"\n```\n:::\n:::\n\n:::\n\nThe same \"cannot find function\" error comes up again, even though we’re sure now that we have the correct package installed. What happened?\n\n### Loading Packages\n\nEven though we’ve installed the package, we haven’t yet loaded it into our current session of R. To do this, we need a second command that will tell R that we want to access the {weights} package and the functions in it.\n\n#### Task 23\n\nRun the following code to load the {weights} package.\n\n**Hint**: No quote marks this time!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(weights)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: Hmisc\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: lattice\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: survival\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: Formula\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ggplot2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggplot2' was built under R version 4.2.2\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'Hmisc'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    format.pval, units\n```\n:::\n:::\n\n\nIf you installed the package successfully, you should find that nothing (apparently) happens when you execute this command. That’s a good thing - it means the command has run without errors. However, if we want to check, let’s have a look at the packages that are currently loaded.\n\nTo do this, look at the \"Packages\" tab (next to the \"Files\" and \"Plots\" tabs). Here you can see a list of all of the packages that are currently installed in R. The ones with a tick mark next to them are currently loaded. If you scroll down, you should see {weights} in this list with a tick. Pick another random package and click on the tick box; you should see that RStudio automatically runs another `library()` command in the Console for you.\n\n#### Task 24\n\nNow that the {weights} package is loaded, run the same `rd()` command again.\n\n::: {.callout-tip collapse=\"true\"}\n#### Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrd(c(7.3928, 59.54, 0.198), digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"7.39\"  \"59.54\" \".20\"  \n```\n:::\n:::\n\n:::\n\nSuccess!\n\n::: {.callout-note collapse=\"true\"}\n### Installing vs Loading\n\nInstalling vs loading packages is often a source of confusion when starting out with R, so let’s look at this in a bit more depth.\n\nWhen you open up RStudio the first time, this is a lot like buying a new mobile phone. When you get a new phone, it comes with some apps pre-installed, like a messaging app, a camera, a calculator, etc. If you only ever wanted to take pictures and do basic maths with your phone, you could probably leave it at that. Most likely, though, you want to use other apps that don’t come with the phone - like WhatsApp, or Outlook. Let’s say you’ve just got a new phone and you want to post about it on Facebook. To do this, you’ll need to:\n\n1. Go to your phone’s app store and download the Facebook app.\n1. Once the download is complete, you have to open the app to use it.\n\nYou must complete both of these steps in order to use the Facebook app. You might recognise that these correspond almost exactly to `install.packages()` and `library()` respectively. In order to use a package that doesn’t come pre-installed with R, you have to do both of these things.\n\nAn important point to note here is that you typically only have to download the Facebook app to your phone once, the first time you want to use it. After that, you can just open the app that you’ve already downloaded. This is the exactly the same way that you should use `install.packages()` and `library()`. You typically only need to use `install.packages()` once per device, and you should always run the command in the Console, not in your documents (where they often cause errors!). However, you will need to load the packages you want to use for any particular document with `library()` every time.\n\nIn summary:\n\n1. `install.packages()`: downloads and installs a package; run only once in the console\n1. `library()`: loads a package for current use; run at the start of every session, include at the beginning of every document\n:::\n\n::: {.callout-note collapse=\"true\"}\n### Verbose Code and Conflicts\n\nAt the risk of causing confusion, you can get around some of the annoying issues with `library()` by using **verbose code**. This means that instead of writing only the function name, in your code you write the package name along with the function name to run the code, separated by a double colon, like this: `package_name::function_name()`. Because R knows where to look for the function, it doesn't matter if the package is loaded or not!\n\nTo see this, un-load (that is, detach) the {weights} package, either by unticking the box next to it in the \"Packages\" tab, or by running the code below in the Console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndetach(\"package:weights\")\n```\n:::\n\n\nYou should see that if you try to run the same `rd()` command, you again get a \"function not found\" error:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrd(c(7.3928, 59.54, 0.198), digits = 2)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in rd(c(7.3928, 59.54, 0.198), digits = 2): could not find function \"rd\"\n```\n:::\n:::\n\n\nNow add on the package name, and the function runs just fine:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweights::rd(c(7.3928, 59.54, 0.198), digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"7.39\"  \"59.54\" \".20\"  \n```\n:::\n:::\n\n\nOf course, you must still have the {weights} package installed!\n\nVerbose code is also an excellent failsafe to prevent errors or unintended output due to **conflicts**. A conflict occurs when two packages contain a function with the same name. There are many, many people in the R community designing functions and packages, and although they try to avoid giving functions the same name, sometimes it happens.\n\nIf you don't include a package name with your function call, whichever package you’ve loaded most recently will be the one that R uses. In R terminology, the most recently loaded function will **mask**, or take precedence over, any other functions with the same name. R will also give you a warning when you load a package with conflicts, although those warnings can be easy to miss (there was a message to this effect when we loaded the {weights} package - did you see it?). There are methods to deal with it, like the {conflicted} package, but one of the most foolproof is to always use the `package_name::function_name()` verbose notation. \n\nIf you wrote every function like this, you would never have any problem with accidentally using the wrong function, so some people recommend it as best practice (especially if you are writing packages for other people to use). However, it also makes your code a bit harder to read at a glance and is more onerous to type. You can do it either way - it’s up to you!\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}